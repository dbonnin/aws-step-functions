{
  "Comment": "Workflow orchestration across three microservices with payload chaining",
  "StartAt": "InitializeWorkflow",
  "States": {
    "InitializeWorkflow": {
      "Type": "Pass",
      "Parameters": {
        "startDateTime.$": "$$.State.EnteredTime",
        "endDateTime": "",
        "services_response": [],
        "originalInput.$": "$"
      },
      "Next": "CallService1"
    },
    "CallService1": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint": "${api_endpoint}/service1/process",
        "Method": "POST",
        "Headers": {
          "Content-Type": "application/json"
        },
        "RequestBody.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": ["States.Http.StatusCode.5xx"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleService1Error",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "statusCode.$": "$.StatusCode",
        "responseBody.$": "$.ResponseBody"
      },
      "ResultPath": "$.service1Result",
      "Next": "ProcessService1Response"
    },
    "ProcessService1Response": {
      "Type": "Pass",
      "Parameters": {
        "startDateTime.$": "$.service1Result.responseBody.startDateTime",
        "endDateTime": "",
        "services_response.$": "$.service1Result.responseBody.services_response",
        "originalInput.$": "$.originalInput"
      },
      "Next": "CallService2"
    },
    "CallService2": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint": "${api_endpoint}/service2/process",
        "Method": "POST",
        "Headers": {
          "Content-Type": "application/json"
        },
        "RequestBody.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": ["States.Http.StatusCode.5xx"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleService2Error",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "statusCode.$": "$.StatusCode",
        "responseBody.$": "$.ResponseBody"
      },
      "ResultPath": "$.service2Result",
      "Next": "ProcessService2Response"
    },
    "ProcessService2Response": {
      "Type": "Pass",
      "Parameters": {
        "startDateTime.$": "$.service2Result.responseBody.startDateTime",
        "endDateTime": "",
        "services_response.$": "$.service2Result.responseBody.services_response",
        "originalInput.$": "$.originalInput"
      },
      "Next": "CallService3"
    },
    "CallService3": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint": "${api_endpoint}/service3/process",
        "Method": "POST",
        "Headers": {
          "Content-Type": "application/json"
        },
        "RequestBody.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": ["States.Http.StatusCode.5xx"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleService3Error",
          "ResultPath": "$.error"
        }
      ],
      "ResultSelector": {
        "statusCode.$": "$.StatusCode",
        "responseBody.$": "$.ResponseBody"
      },
      "ResultPath": "$.service3Result",
      "Next": "FinalizeWorkflow"
    },
    "FinalizeWorkflow": {
      "Type": "Pass",
      "Parameters": {
        "startDateTime.$": "$.service3Result.responseBody.startDateTime",
        "endDateTime.$": "$$.State.EnteredTime",
        "services_response.$": "$.service3Result.responseBody.services_response",
        "status": "completed",
        "totalProcessingTimeMs.$": "$.service3Result.responseBody.services_response[*].processingTimeMs"
      },
      "End": true
    },
    "HandleService1Error": {
      "Type": "Pass",
      "Parameters": {
        "startDateTime.$": "$.startDateTime",
        "endDateTime.$": "$$.State.EnteredTime",
        "services_response.$": "$.services_response",
        "error": {
          "failedAt": "service1",
          "details.$": "$.error",
          "originalInput.$": "$.originalInput"
        },
        "status": "failed"
      },
      "End": true
    },
    "HandleService2Error": {
      "Type": "Pass",
      "Parameters": {
        "startDateTime.$": "$.startDateTime",
        "endDateTime.$": "$$.State.EnteredTime",
        "services_response.$": "$.services_response",
        "error": {
          "failedAt": "service2",
          "details.$": "$.error",
          "originalInput.$": "$.originalInput"
        },
        "status": "failed"
      },
      "End": true
    },
    "HandleService3Error": {
      "Type": "Pass",
      "Parameters": {
        "startDateTime.$": "$.startDateTime",
        "endDateTime.$": "$$.State.EnteredTime",
        "services_response.$": "$.services_response",
        "error": {
          "failedAt": "service3",
          "details.$": "$.error",
          "originalInput.$": "$.originalInput"
        },
        "status": "failed"
      },
      "End": true
    }
  }
}